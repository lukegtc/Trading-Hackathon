{"filter":false,"title":"OrderHandler.py","tooltip":"/TraderBot/OrderHandler.py","undoManager":{"mark":18,"position":18,"stack":[[{"start":{"row":0,"column":0},"end":{"row":100,"column":44},"action":"insert","lines":["class OrderHandler:","    \"\"\"","    Wrapper class to insert, delete, and update orders","    @author: Nidhish","    \"\"\"","","    def __init__(self, exchange, INSTRUMENTS):","        self.exchange = exchange","        self.INSTRUMENTS = INSTRUMENTS","        self.bids = {}","        self.asks = {}","        ","","    def place_order(self, instrument_id, price, volume, side, order_type):","        \"\"\"","        Places an order on the exchange.","        Args:","            instrument_id (str): The instrument to place the order on.","            price (float): The price to place the order at.","            volume (int): The volume to place the order for.","            side (str): The side to place the order on ['bid' / 'ask'].","            order_type (str): The order type to place the order as ['limit', 'ioc'].","        Returns:","            order_id (int): The id of the order that was placed.","        \"\"\"","        order_id = self.exchange.insert_order(instrument_id, price, volume, side, order_type)","","        return order_id","","    def delete_order(self, instrument_id, order_id):","        \"\"\"","        Deletes an order from the exchange.","        Args:","            instrument_id (str): The instrument to delete the order for.","            order_id (int): The id of the order to delete.","        Returns:","            success (bool): Whether the order was successfully deleted.","        \"\"\"","        success = self.exchange.delete_order(instrument_id, order_id)","        return success","        ","    def update_outstanding_orders(self):","        \"\"\"","        Update the outstanding limit orders for all instruments.","        \"\"\"","        for instrument in self.INSTRUMENTS:","            orders = self.exchange.get_outstanding_orders(instrument).values()","            self.asks[instrument] = sorted([o for o in orders if o.side == \"ask\"], key = lambda x: x.price)","            self.bids[instrument] = sorted([o for o in orders if o.side == \"bid\"], key = lambda x: x.price)","    ","    def get_best_bid(self, instrument):","        \"\"\"","        Returns the highest bid for the given instrument.","        Args:","            instrument (str): The instrument to get the bid for.","        Returns:","            bid (Order): Order object for the higest bid.","        \"\"\"","        # The bids are sorted in ascending order, so highest bid is last.","        bids = self.bids[instrument]","        return bids[-1] if bids else None","            ","                ","    def get_best_ask(self, instrument):","        \"\"\"","        Returns the lowest ask for the given instrument.","        Args:","            instrument (str): The instrument to get the ask for.","        Returns:","            ask (Order): Order object for the lowest ask. If ther are","            no asks then None is returned.","            asks <list>","            asks[0] type <OrderStatus>","        \"\"\"","        # The bids are sorted in ascending order, so highest bid is last.","        asks = self.asks[instrument]","        return asks[0] if asks else None","    ","    ","    def get_ask_volume(self, instrument):","        \"\"\"","        Returns the total volume of all outstanding asks.","        Args:","            instrument (str): The instrument to get the ask volume for.","        Returns:","            volume (int): The total volume of all outstanding asks.","        \"\"\"","        asks = self.asks[instrument]","        return sum([o.volume for o in asks])","        ","        ","    def get_bid_volume(self, instrument):","        \"\"\"","        Returns the total volume of all outstanding asks.","        Args:","            instrument (str): The instrument to get the ask volume for.","        Returns:","            volume (int): The total volume of all outstanding asks.","        \"\"\"","        bids = self.bids[instrument]","        return sum([o.volume for o in bids])"],"id":1}],[{"start":{"row":25,"column":61},"end":{"row":25,"column":62},"action":"insert","lines":["p"],"id":2,"ignore":true}],[{"start":{"row":25,"column":62},"end":{"row":25,"column":66},"action":"insert","lines":["rice"],"id":3,"ignore":true}],[{"start":{"row":25,"column":66},"end":{"row":25,"column":67},"action":"insert","lines":["="],"id":4,"ignore":true}],[{"start":{"row":25,"column":74},"end":{"row":25,"column":75},"action":"insert","lines":["v"],"id":5,"ignore":true}],[{"start":{"row":25,"column":75},"end":{"row":25,"column":77},"action":"insert","lines":["ol"],"id":6,"ignore":true}],[{"start":{"row":25,"column":77},"end":{"row":25,"column":80},"action":"insert","lines":["ume"],"id":7,"ignore":true}],[{"start":{"row":25,"column":80},"end":{"row":25,"column":81},"action":"insert","lines":["="],"id":8,"ignore":true}],[{"start":{"row":25,"column":89},"end":{"row":25,"column":90},"action":"insert","lines":["s"],"id":9,"ignore":true}],[{"start":{"row":25,"column":90},"end":{"row":25,"column":93},"action":"insert","lines":["ide"],"id":10,"ignore":true}],[{"start":{"row":25,"column":93},"end":{"row":25,"column":94},"action":"insert","lines":["="],"id":11,"ignore":true}],[{"start":{"row":25,"column":100},"end":{"row":25,"column":101},"action":"insert","lines":["o"],"id":12,"ignore":true}],[{"start":{"row":25,"column":101},"end":{"row":25,"column":105},"action":"insert","lines":["rder"],"id":13,"ignore":true}],[{"start":{"row":25,"column":105},"end":{"row":25,"column":107},"action":"insert","lines":["_t"],"id":14,"ignore":true}],[{"start":{"row":25,"column":107},"end":{"row":25,"column":110},"action":"insert","lines":["ype"],"id":15,"ignore":true}],[{"start":{"row":25,"column":110},"end":{"row":25,"column":111},"action":"insert","lines":["="],"id":16,"ignore":true}],[{"start":{"row":38,"column":60},"end":{"row":38,"column":61},"action":"insert","lines":["o"],"id":17,"ignore":true}],[{"start":{"row":38,"column":61},"end":{"row":38,"column":65},"action":"insert","lines":["rder"],"id":18,"ignore":true}],[{"start":{"row":38,"column":65},"end":{"row":38,"column":69},"action":"insert","lines":["_id="],"id":19,"ignore":true}]]},"ace":{"folds":[],"scrolltop":1474.5,"scrollleft":0,"selection":{"start":{"row":25,"column":81},"end":{"row":25,"column":87},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1648992024943,"hash":"5a8abf9a3aab7a184d3efb518169bbbc2d66f70c"}